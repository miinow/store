openapi: 3.0.0
info:
  title: store
  version: '1.0'
  description: A simple store
  contact:
    name: SecuritEase Dev
    url: 'https://www.securitease.com'
    email: internal@securitease.com
  termsOfService: 'https://www.securitease.com'
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.htm'
servers:
  - url: 'http://localhost:8080'
    description: dev
paths:
  /order:
    get:
      summary: Get Orders (paged)
      tags: [order]
      description: Get all orders (paged)
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 0 }
          description: Page number (0-based)
        - in: query
          name: size
          schema: { type: integer, minimum: 1 }
          description: Page size
        - in: query
          name: sort
          schema: { type: string }
          description: Sorting criteria in the format property,(asc|desc). Default sort is id,desc
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOrderDTO'
      operationId: getOrders
    post:
      summary: Create Order
      tags: [order]
      operationId: createOrder
      description: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
  /order/{id}:
    get:
      summary: Get Order by ID
      tags: [order]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
        '404':
          description: Not Found
  /customer:
    get:
      summary: Get Customers (paged)
      tags: [customer]
      description: Get all customers (paged)
      parameters:
        - in: query
          name: name
          schema: { type: string }
          required: false
          description: Optional case-insensitive substring filter on name
        - in: query
          name: page
          schema: { type: integer, minimum: 0 }
        - in: query
          name: size
          schema: { type: integer, minimum: 1 }
        - in: query
          name: sort
          schema: { type: string }
          description: Sorting criteria, default id,desc
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCustomerDTO'
      operationId: getCustomers
    post:
      summary: Create Customer
      tags: [customer]
      operationId: createCustomer
      description: Create a new customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDTO'
  /products:
    get:
      summary: Get Products (paged)
      tags: [product]
      description: Get all products (paged)
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 0 }
        - in: query
          name: size
          schema: { type: integer, minimum: 1 }
        - in: query
          name: sort
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageProductDTO'
      operationId: getProducts
    post:
      summary: Create Product
      tags: [product]
      operationId: createProduct
      description: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
  /products/{id}:
    get:
      summary: Get Product by ID
      tags: [product]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
        '404':
          description: Not Found
components:
  schemas:
    # Requests
    CreateCustomerRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
    CreateOrderRequest:
      type: object
      required: [description, customerId, productIds]
      properties:
        description:
          type: string
        customerId:
          type: integer
          format: int64
        productIds:
          type: array
          items:
            type: integer
            format: int64
    CreateProductRequest:
      type: object
      required: [description]
      properties:
        description:
          type: string

    # DTOs
    CustomerDTO:
      type: object
      properties:
        id: { type: integer, format: int64 }
        name: { type: string }
        orders:
          type: array
          items: { $ref: '#/components/schemas/CustomerOrderDTO' }
    CustomerOrderDTO:
      type: object
      properties:
        id: { type: integer, format: int64 }
        description: { type: string }

    OrderDTO:
      type: object
      properties:
        id: { type: integer, format: int64 }
        description: { type: string }
        customer: { $ref: '#/components/schemas/OrderCustomerDTO' }
        products:
          type: array
          items: { $ref: '#/components/schemas/OrderProductDTO' }
    OrderCustomerDTO:
      type: object
      properties:
        id: { type: integer, format: int64 }
        name: { type: string }
    OrderProductDTO:
      type: object
      properties:
        id: { type: integer, format: int64 }
        description: { type: string }

    ProductDTO:
      type: object
      properties:
        id: { type: integer, format: int64 }
        description: { type: string }
        orders:
          type: array
          items: { type: integer, format: int64 }

    # Page wrappers (simplified Spring Data Page representation)
    PageMetadata:
      type: object
      properties:
        size: { type: integer }
        number: { type: integer }
        totalElements: { type: integer, format: int64 }
        totalPages: { type: integer }
    PageCustomerDTO:
      type: object
      properties:
        content:
          type: array
          items: { $ref: '#/components/schemas/CustomerDTO' }
        size: { type: integer }
        number: { type: integer }
        totalElements: { type: integer, format: int64 }
        totalPages: { type: integer }
    PageOrderDTO:
      type: object
      properties:
        content:
          type: array
          items: { $ref: '#/components/schemas/OrderDTO' }
        size: { type: integer }
        number: { type: integer }
        totalElements: { type: integer, format: int64 }
        totalPages: { type: integer }
    PageProductDTO:
      type: object
      properties:
        content:
          type: array
          items: { $ref: '#/components/schemas/ProductDTO' }
        size: { type: integer }
        number: { type: integer }
        totalElements: { type: integer, format: int64 }
        totalPages: { type: integer }

tags:
  - name: store
    description: store operations
  - name: order
    description: order operations
  - name: customer
    description: customer operations
  - name: product
    description: product operations
